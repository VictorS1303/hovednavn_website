---
// RecordPlayer.astro
import Vinyl from './Vinyl.astro'
import TrackData from './TrackData.astro'
import RecordPlayerControls from './RecordPlayerControls.astro'

const {class: className, id: id} = Astro.props

// Track data array
---

<div
  class={`${className} flex flex-col items-center mx-auto py-6 rounded-2xl bg-[var(--record-player-bg-color)] w-[300px] h-[400px]`}>
  <div class='relative flex flex-col h-full items-center justify-start gap-8'>
    <div
      class='container vinyl-container relative h-[150px] w-[150px] bg-black rounded-full'
      id='vinyl_container'>
      <div
        class='absolute top-[50%] left-[50%] -translate-[50%] rounded-full z-[1000] vinyl-hole h-[15px] w-[15px] bg-black'
        id='vinyl_hole'>
      </div>
      <img
        class='spin absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 h-[97%] w-[97%] p-2 object-cover rounded-full'
        id='cover_image'
        src=''
      />
    </div>

    <div
      class='container track-data-container-and-controls-container'
      id='track_data_and_controls_container'>
      <div
        class='container track-data-container w-[200px] whitespace-nowrap'
        id='track_data_container'>
        <!-- Display the track title -->
        <h3 class='track-title text-xl text-center' id='track_title'>
          Velkommen til Danmark
        </h3>

        <!-- Progress Bar (you can update the width dynamically if you have progress data) -->
        <div class='w-full bg-white rounded-full h-2.5 mt-4'>
          <div
            class='bg-[var(--progress-bar-inner-bg-color)] h-2.5 rounded-full'
            style='width: 45%'>
          </div>
        </div>

        <!-- Display the start time and end time -->
        <div
          class='container length-info-container flex justify-between mt-2'
          id='length_info_container'>
          <h4 class='start-time track-duration-color' id='start_time'>0:00</h4>
          <h4 class='full-time track-duration-color' id='end_time'>3:56</h4>
        </div>
      </div>
    </div>

    <div
      class='container controls-container flex items-center justify-center h-[30px] w-full gap-6 -mt-2'
      id='controls_container'>
      <button
        class='btn control-btn previous-song-btn text-2xl cursor-pointer'
        id='previous_song_btn'>
        <i class='fa-solid fa-backward'></i>
      </button>
      <button
        class='btn control-btn play-pause-song-btn text-3xl cursor-pointer'
        id='play_pause_song_btn'>
        <i class='fa-solid fa-play'></i>
      </button>
      <button
        class='btn control-btn next-song-btn text-2xl cursor-pointer'
        id='next_song_btn'>
        <i class='fas fa-forward'></i>
      </button>
    </div>
  </div>
</div>

<script>
  const trackCoverImage = document.querySelector('#cover_image')
  const trackDataContainer = document.querySelector('#track_data_container')
  const trackTitle = document.querySelector('#track_title')
  const startTime = document.querySelector('#start_time')
  const endTime = document.querySelector('#end_time')
  const controlBtnsContainer = document.querySelector('.controls-container')
  const playPauseSongBtn = document.querySelector('.play-pause-song-btn i')

  const audio = new Audio()

  controlBtnsContainer?.addEventListener('click', (e) => controlAudio(e))

  const trackData = [
    {
      trackTitle: 'Velkommen til Danmark',
      audioCover: 'velkommen-til-dk',
      audioTrack: 'velkommen-til-dk',
      progress: 30,
      startTime: '0:00',
      endTime: '3:50',
    },
    {
      trackTitle: 'Jorden er flad',
      audioCover: 'jorden-er-flad',
      audioTrack: 'jorden-er-flad',
      progress: 30,
      startTime: '0:00',
      endTime: '2:32',
    },
  ]

  let songIndex = 1
  loadSong(trackData[songIndex])

  function loadSong(song) {
    trackTitle.textContent = song.trackTitle
    trackCoverImage.src = `../src/recordings/covers/${song.audioCover}_cover.jpg`
    audio.src = `../src/recordings/audio/${song.audioTrack}.mp3`
    startTime.textContent = song.startTime
    endTime.textContent = song.endTime
  }

  function controlAudio(e) {
    if (e.target.closest('.previous-song-btn')) {
      console.log('Backwards')
    } else if (e.target.closest('.play-pause-song-btn')) {
      toggleAudioPlayState()
    } else if (e.target.closest('.next-song-btn')) {
      console.log('Previous song')
    }
  }

  function toggleAudioPlayState() {
    audio.paused ? audio.play() : audio.pause()
    updatePlayPauseIconState()
  }

  function updatePlayPauseIconState() {
    playPauseSongBtn?.classList.contains('fa-play')
      ? (playPauseSongBtn.classList.remove('fa-play'),
        playPauseSongBtn.classList.add('fa-pause'))
      : playPauseSongBtn?.classList.add('fa-play')
  }
</script>
